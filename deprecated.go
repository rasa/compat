// SPDX-FileCopyrightText: Copyright Â© 2025 Ross Smith II <ross@smithii.com>
// SPDX-License-Identifier: MIT

package compat

import (
	"os"
)

// IsAdmin returns true if the user is root, or has Windows administrator rights.
//
// Deprecated: Use IsRoot() instead. This function may be removed in the future.
var IsAdmin = IsRoot

// ReplaceFile atomically replaces the destination file or directory with the
// source.  It is guaranteed to either replace the target file entirely, or not
// change either file.
//
// Deprecated: Use Rename() instead. This function may be removed in the future.
var ReplaceFile = Rename

// FileOptions define the behavior of `WriteReaderAtomic()`, etc.
//
// Deprecated: Use Options instead. This may be removed in the future.
type FileOptions = Options

// Deprecated: Use Supports*() functions instead. This may be removed in the future.
type SupportedType = supportsType

const (
	// Links defines if FileInfo's Links() function is supported by the OS.
	// Deprecated: Use SupportsLinks() instead. This may be removed in the future.
	Links = supportsLinks
	// ATime defines if FileInfo's ATime() function is supported by the OS.
	// Deprecated: Use SupportsATime() instead. This may be removed in the future.
	ATime = supportsATime
	// BTime defines if FileInfo's BTime() function is supported by the OS.
	// Deprecated: Use SupportsBTime() instead. This may be removed in the future.
	BTime = supportsBTime
	// CTime defines if FileInfo's CTime() function is supported by the OS.
	// Deprecated: Use SupportsCTime() instead. This may be removed in the future.
	CTime = supportsCTime
	// UID defines if FileInfo's UID() function is supported by the OS.
	// Deprecated: No longer used or needed. This may be removed in the future.
	UID = supportsUID
	// GID defines if FileInfo's GID() function is supported by the OS.
	// Deprecated: No longer used or needed. This may be removed in the future.
	GID = supportsGID
)

// Supported returns whether supportedType is supported by the operating system.
// Deprecated: Use SupportsLinks(), SupportsATime(), SupportsBTime() and
// SupportsCTime() functions instead. This function may be removed in the future.
var Supported = supported

func supported(supportedType SupportedType) bool {
	return supports&supportedType == supportedType
}

// Deprecated: Use UserIDSourceIsInt instead.
const UserIDSourceIsNumeric = UserIDSourceIsInt

// CreateEx creates or opens the named file.
// It creates or opens the file with the specified flags ([O_RDWR] etc.).
// If O_RDWR or O_WRONLY is not specified, O_RDWR will be used.
// If the file already exists, and O_TRUNC is passed, it is truncated.
// If the file does not exist, it is create using the perm's permission bits
// (before umask). If successful, methods on the returned File can
// be used for I/O; the associated file descriptor has mode [O_RDWR].
// The directory containing the file must already exist.
// If there is an error, it will be of type [*PathError].
// Deprecated: Use Create() instead, and pass perm and flag via Option array.
// This function may be removed in the future.
var CreateEx = createex

func createex(name string, perm os.FileMode, flag int) (*os.File, error) {
	flag |= os.O_CREATE
	if flag&os.O_WRONLY == 0 {
		flag |= os.O_RDWR
	}

	return create(name, perm, flag)
}

// CreateTempEx creates a new temporary file in the directory dir,
// opens the file for reading and writing, and returns the resulting file.
// It creates the named file with specified flag ([O_RDONLY] etc.).
// The filename is generated by taking pattern and adding a random string to the end.
// If pattern includes a "*", the random string replaces the last "*".
// The file is created with mode 0o600 (before umask).
// If dir is the empty string, CreateTempEx uses the default directory for temporary files, as returned by [TempDir].
// Multiple programs or goroutines calling CreateTempEx simultaneously will not choose the same file.
// The caller can use the file's Name method to find the pathname of the file.
// It is the caller's responsibility to remove the file when it is no longer needed.
// Deprecated: Use CreateTemp() instead, and pass flag via Option array.
// This function may be removed in the future.
var CreateTempEx = createTempEx

func createTempEx(dir, pattern string, flag int) (*os.File, error) {
	return createTemp(dir, pattern, CreateTempPerm, flag)
}

// WriteFileEx writes data to the named file, creating it if necessary.
// It creates or opens the named file with specified flag ([O_RDWR] etc.).
// If the file does not exist, WriteFileEx creates it with perm's permissions bits (before umask);
// otherwise WriteFile truncates or appends, without changing permissions.
// Since WriteFile requires multiple system calls to complete, a failure mid-operation
// can leave the file in a partially written state.
// Deprecated: Use WriteFile() instead, and pass flag via Option array.
// This function may be removed in the future.
var WriteFileEx = writeFileEx

func writeFileEx(name string, data []byte, perm os.FileMode, flag int) error {
	return writeFile(name, data, perm, flag)
}

// DefaultFileMode sets the default file mode instead of using the
// `os.CreateTemp()` default of `0600`.
// Deprecated: Use WithDefaultFileMode() instead.
// This function may be removed in the future.
var DefaultFileMode = WithDefaultFileMode

// Flag sets the flag option.
// Deprecated: Use WithFlags() instead.
// This function may be removed in the future.
var Flag = WithFlags

// KeepFileMode preserves the file mode of an existing file instead of using the
// default value.
// Deprecated: Use WithKeepFileMode() instead.
// This function may be removed in the future.
var KeepFileMode = WithKeepFileMode

// UseFileMode sets the file mode to the desired value and has precedence over all
// other options.
// Deprecated: Use WithFileMode() instead.
// This function may be removed in the future.
var UseFileMode = WithFileMode
