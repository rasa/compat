---
# checkov:skip=CKV_GHA_7: The build output cannot be affected by user parameters...
# yaml-language-server: $schema https://json.schemastore.org/github-workflow.json

name: build-most (all except Android and iOS)

on: # yamllint disable-line rule:truthy
  workflow_call: # Required so this workflow can be called from another workflow
    inputs:
      verbose_testing:
        type: string
        default: "false"
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
    inputs:
      verbose_testing:
        description: "Test with -v options."
        type: choice
        options:
          - "false"
          - "true"
        default: "false"

env:
  CGO_ENABLED: 0

jobs:
  build-most:
    name: build-most
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        check-latest: true

    - run: printf '::notice ::%s\n' "$(go version)"

    - name: go build (all targets but android and ios)
      run: |
        # go build (all targets but android and ios)

        mapfile -t targets < <(go tool dist list | grep -E -v '(android|ios)')
        set +e
        fails=0
        builds=0
        declare -A seen
        for target in "${targets[@]}"; do
          export GOOS="${target%%/*}"
          if [[ -v seen["${GOOS}"] ]]; then
            continue
          fi
          export GOARCH="${target#*/}"
          seen["${GOOS}"]=1
          ((builds++))
          echo "Build ${builds}: ${target}"
          if ! go build .; then
            echo "::warning ::Failed to build ${target}"
            ((fails++))
          fi
        done
        if ((fails>0)); then
          echo "::warning ::${fails} of ${builds} builds failed"
        fi
        exit "${fails}"

    - run: |
        TEST_OPTS=()
        if [[ "${{ inputs.verbose_testing }}" == "true" ]]; then
          TEST_OPTS+=(-v)
        fi

        go test "${TEST_OPTS[@]}" .
