---
# yaml-language-server: $schema https://json.schemastore.org/github-workflow.json

name: build-only-nocgo

on: # yamllint disable-line rule:truthy
  workflow_call: # Required so this workflow can be called from another workflow
    inputs:
      cgo_enabled:
        default: "0"
        type: string # required
      goarches:
        default: default
        type: string # required
      test_opts:
        default: ""
        type: string # required
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
    inputs:
      # checkov:skip=CKV_GHA_7:The build output cannot be affected by user parameters...
      cgo_enabled:
        description: "CGO_ENABLED"
        type: choice
        default: "0"
        options:
          - "0"
          - "1"
      # checkov:skip=CKV_GHA_7:The build output cannot be affected by user parameters...
      goarches:
        description: "Build on the default GOARCH, or all GOARCHes for the OS"
        type: choice
        options:
          - default
          - all
        default: default
       # checkov:skip=CKV_GHA_7: The build output cannot be affected by user parameters...
      test_opts:
        description: "Options to pass to go test command (-v, -short, -run TestX, etc.)"
        type: string
        default: ""

env:
  CGO_ENABLED: ${{ inputs.cgo_enabled }}
  goarches: ${{ inputs.goarches }}
  TEST_OPTS: ${{ inputs.test_opts }}

jobs:
  build-only-nocgo:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v5

    - uses: actions/setup-go@v6
      with:
        go-version: '1.25'
        check-latest: true

    - run: printf '::notice ::%s\n' "$(go version)"

    - name: go build (all targets but android and ios)
      run: |
        # go build (all targets but android and ios)
        : "${goarches:=all}"
        printf 'CGO_ENABLED=%s\n' "${CGO_ENABLED:-}"
        printf 'goarches=%s\n' "${goarches:-}"
        mapfile -t targets < <(go tool dist list | grep -E -v '(android|ios)')
        set +e
        fails=0
        builds=0
        declare -A seen
        for target in "${targets[@]}"; do
          export GOOS="${target%%/*}"
          if [[ -v seen["${GOOS}"] ]]; then
            if [[ "${goarches}" != "all" ]]; then
              continue
            fi
          fi
          export GOARCH="${target#*/}"
          echo "Build ${builds}: ${target}"
          if ! go build -trimpath .; then
            echo "::warning ::Failed to build ${target}"
            ((fails++))
          fi
          seen["${GOOS}"]=1
          ((builds++))
        done
        if ((fails>0)); then
          echo "::warning ::${fails} of ${builds} builds failed"
        fi
        exit "${fails}"

    - name: go test .
      run: |
        # go test ${TEST_OPTS} .
        : "${TEST_OPTS:=}"
        go test ${TEST_OPTS} .
