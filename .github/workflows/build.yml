---
# yaml-language-server: $schema https://json.schemastore.org/github-workflow.json

name: build

on:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - '**.go'
  #     - 'go.mod'
  #     # - '.github/workflows/*'
  #     # - '.goreleaser.yml'
  #     # - 'Makefile'
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - '**.go'
  #     - 'go.mod'
  #     # - '.github/workflows/*'
  #     # - '.goreleaser.yml'
  workflow_call: # Required so this workflow can be called from another workflow
    inputs:
      verbose_testing:
        type: string
        default: "false"
      runner:
        type: string
        default: "ubuntu-24.04"
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
    inputs:
      # checkov:skip=CKV_GHA_7: The build output cannot be affected by user parameters...
      verbose_testing:
        description: "Test with -v options."
        type: choice
        options:
          - "false"
          - "true"
        default: "false"
      # checkov:skip=CKV_GHA_7: The build output cannot be affected by user parameters...
      runner:
        description: "GitHub runner to use"
        type: choice
        options:
          - ubuntu-24.04 # ubuntu-latest
          - windows-2025
          - macos-15 # arm64
          - ubuntu-24.04-arm
          - ubuntu-22.04
          - ubuntu-22.04-arm
          - windows-11-arm
          - windows-2022 # windows-latest
          - macos-15-large # amd64
          - macos-14 # arm64 # macos-latest
          - macos-14-large # amd64
          - macos-13 # amd64
          - macos-13-xlarge # arm64
          - ubuntu
          - windows
          - macos-15
          - macos-14
          - macos-13
          - macos
          - all
        default: "ubuntu-24.04"

permissions:
  contents: read

jobs:
  build:
    name: build
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-24.04 # ubuntu-latest
          - windows-2025
          - macos-15 # arm64
          - ubuntu-24.04-arm
          - ubuntu-22.04
          - ubuntu-22.04-arm
          - windows-11-arm
          - windows-2022 # windows-latest
          - macos-15-large # amd64
          - macos-14 # arm64 # macos-latest
          - macos-14-large # amd64
          - macos-13 # amd64
          - macos-13-xlarge # arm64

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - run: echo "SHOULD_RUN=yes" >> "${GITHUB_ENV}"
        if: startsWith(matrix.os, inputs.runner) || inputs.runner == 'all' && !(contains(matrix.os, 'arm') && github.repository_visibility == 'public')

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: env.SHOULD_RUN

      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        if: env.SHOULD_RUN
        # if: runner.os != 'Windows'
        with:
          go-version: '1.24'
          check-latest: true
          cache: false

      # Let's see if we see the same 80% speed improvement as mentioned in
      # https://github.com/elastic/apm-server/pull/15623#issuecomment-2648709041
      # failing on windows-11-arm:
      # - uses: antontroshin/setup-go@bda02de8887c9946189f81e7e59512914aeb9ea4
      #   if: runner.os == 'Windows'
      #   with:
      #     go-version: '1.24'
      #     check-latest: true
      #     cache: false

      - name: Set Go cache variables
        if: env.SHOULD_RUN
        run: |
          # printf '::notice ::%s\n' "$(go version)"
          # printf 'GOVERSION=%s\n'  "$(go version | sed 's#^.*go##;s# .*##')" >>"${GITHUB_ENV}"
          printf 'GOCACHE=%s\n'    "$(go env GOCACHE | tr '\\' '/')" >>"${GITHUB_ENV}"
          printf 'GOMODCACHE=%s\n' "$(go env GOMODCACHE | tr '\\' '/')" >>"${GITHUB_ENV}"
          # go env

      - name: Cache Go's build and mod caches
        if: env.SHOULD_RUN
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        if: env.SHOULD_RUN
        run: |
          printf 'inputs.verbose_testing="%s"\n' "${{ inputs.verbose_testing }}"
          TEST_OPTS_ARRAY=()
          if [[ "${{ inputs.verbose_testing }}" == "true" ]]; then
            TEST_OPTS_ARRAY+=(-v)
          fi
          export TEST_OPTS="${TEST_OPTS_ARRAY[*]}"
          printf 'TEST_OPTS="%s"\n' "${TEST_OPTS}"
          make ci TEST_OPTS="$TEST_OPTS" # && exit 0
          # @TODO(rasa) remove this hack
          # test "${{ matrix.os }}" == "windows-2025" || exit 1
          # echo '::error::tests failed on windows-2025'
          # exit 0
        env:
          COMPAT_DEBUG: 1

      - name: Upload coverage
        if: env.SHOULD_RUN
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-${{ matrix.os }}
          path: coverage.*
        # env:
        #  CGO_ENABLED: ${{ contains(matrix.os, 'windows') && '0' || '1' }}

      - run: go tool goreleaser release --clean --snapshot
        if: runner.os == 'Linux' && env.SHOULD_RUN

      - name: Upload dist
        if: env.SHOULD_RUN
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist-${{ matrix.os }}
          path: dist

      - name: Upload coverage to Codecov
        if: env.SHOULD_RUN
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          fail_ci_if_error: false
          files: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
